const {
  googleSearch,
  bingSearch,
  yahooSearch,
  duckduckgoSearch,
} = require("./searchEngines");

/**
 * 統一的搜索引擎工具函數 
 * @param {string} query - 搜索關鍵字
 * @param {string} engine - 搜索引擎: 'google', 'bing', 'yahoo', 'duckduckgo'
 * @param {Object} options - 附加選項
 * @param {string} options.language - 搜索語言，例如 'zh-TW'
 * @param {number} options.timeout - 請求超時時間（毫秒）
 * @param {number} options.maxResults - 最大結果數
 * @param {boolean} options.safeSearch - 是否開啟安全搜索
 * @returns {Promise<Array>} 搜索結果陣列
 */
async function searchEngineTool(query, engine, options = {}) {
  // 設定默認選項
  const defaultOptions = {
    language: 'zh-TW',
    timeout: 10000,
    maxResults: 20,
    safeSearch: true
  };
  
  // 合併用戶選項
  const searchOptions = { ...defaultOptions, ...options };
  
  // 驗證輸入
  if (!query || typeof query !== 'string' || query.trim().length === 0) {
    throw new Error("查詢關鍵字不能為空");
  }
  
  // 效能監控
  const startTime = Date.now();
  let results = [];
  
  try {
    // 根據不同的搜索引擎調用不同的函數
    switch (engine.toLowerCase()) {
      case "google":
        results = await googleSearch(query, searchOptions);
        break;
      case "bing":
        results = await bingSearch(query, searchOptions);
        break;
      case "yahoo":
        results = await yahooSearch(query, searchOptions);
        break;
      case "duckduckgo":
        results = await duckduckgoSearch(query, searchOptions);
        break;
      default:
        throw new Error(`不支持的搜索引擎: ${engine}`);
    }
    
    // 處理和標準化結果
    results = results.map(item => ({
      title: item.title || '',
      href: item.href || item.url || '',
      abstract: item.abstract || item.snippet || item.description || '',
      timestamp: new Date().toISOString(),
      engine: engine.toLowerCase()
    }));
    
    // 過濾無效結果
    results = results.filter(item => item.href && item.title);
    
    // 限制結果數量
    if (searchOptions.maxResults > 0 && results.length > searchOptions.maxResults) {
      results = results.slice(0, searchOptions.maxResults);
    }
    
    // 記錄性能數據
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    // 只在開發環境輸出日誌
    if (process.env.NODE_ENV !== 'production') {
      console.log(`[searchEngineTool] ${engine} 搜索 "${query}" 完成，找到 ${results.length} 條結果，耗時: ${duration}ms`);
    }
    
    return results;
  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    // 輸出錯誤到控制台
    console.error(`[searchEngineTool] ${engine} 搜索失敗，耗時: ${duration}ms，錯誤: ${error.message}`);
    
    // 重新拋出錯誤，附加上下文信息
    const enhancedError = new Error(`${engine} 搜索失敗: ${error.message}`);
    enhancedError.originalError = error;
    enhancedError.engine = engine;
    enhancedError.query = query;
    enhancedError.duration = duration;
    
    throw enhancedError;
  }
}

// 暴露主要搜索函數
module.exports = searchEngineTool;

// 提供額外的實用工具函數
module.exports.engines = {
  google: googleSearch,
  bing: bingSearch,
  yahoo: yahooSearch,
  duckduckgo: duckduckgoSearch
};

// 提供批量搜索多個引擎的便捷函數
module.exports.searchMultipleEngines = async function(query, engines = ['google', 'bing'], options = {}) {
  if (!Array.isArray(engines) || engines.length === 0) {
    throw new Error("至少需要指定一個搜索引擎");
  }
  
  // 並行執行所有搜索請求
  const searchPromises = engines.map(engine => {
    return searchEngineTool(query, engine, options)
      .then(results => ({ engine, results, success: true }))
      .catch(error => ({ engine, results: [], success: false, error: error.message }));
  });
  
  return Promise.all(searchPromises);
};

// 版本資訊
module.exports.version = '1.2.0';
