const puppeteer = require("puppeteer");

async function googleSearch(query) {
  let browser = null;
  try {
    browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
    
    await page.goto(
      `https://www.google.com/search?q=${encodeURIComponent(query)}&hl=en&gl=us`,
      { waitUntil: 'networkidle2', timeout: 15000 }
    );
    
    const summaries = await page.evaluate(() => {
      try {
        const resultElements = Array.from(
          document.querySelectorAll('div.g, div[data-hveid], div[data-soar]')
        ).filter(el => {
          return el.querySelector('a h3') || el.querySelector('h3');
        });
        
        if (!resultElements || resultElements.length === 0) {
          return [];
        }
        
        const firstFiveElements = resultElements.slice(0, 5);
        return firstFiveElements.map((el) => {
          let title = '';
          let href = '';
          let abstract = '';
          
          try {
            const titleElement = el.querySelector('a h3') || el.querySelector('h3');
            title = titleElement ? titleElement.textContent.trim() : '';
            
            const linkElement = el.querySelector('a');
            href = linkElement ? linkElement.href : '';
            
            const snippetElement = el.querySelector('div[data-sncf], div.VwiC3b, span.aCOpRe, [data-content-feature="1"]');
            abstract = snippetElement ? snippetElement.textContent.trim() : '';
            
            return { href, title, abstract };
          } catch (innerError) {
            console.error('解析單個結果時出錯：', innerError);
            return { href, title, abstract };
          }
        }).filter(item => item.href && item.title);
      } catch (evalError) {
        console.error('評估頁面內容時出錯：', evalError);
        return [];
      }
    });
    
    if (browser) {
      await browser.close();
    }
    
    return Array.isArray(summaries) ? summaries : [];
  } catch (error) {
    console.error("Google 搜索出錯:", error);
    if (browser) {
      await browser.close();
    }
    return [];
  }
}

async function bingSearch(query) {
  let browser = null;
  try {
    browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
    
    await page.goto(
      `https://www.bing.com/search?q=${encodeURIComponent(query)}&cc=US`,
      { waitUntil: 'networkidle2', timeout: 15000 }
    );
    
    const summaries = await page.evaluate(() => {
      try {
        const liElements = Array.from(
          document.querySelectorAll("#b_results > .b_algo")
        );
        
        if (!liElements || liElements.length === 0) {
          return [];
        }
        
        const firstFiveElements = liElements.slice(0, 5);
        return firstFiveElements.map((li) => {
          try {
            const abstractElement = li.querySelector(".b_caption > p");
            const linkElement = li.querySelector("a");
            
            if (!linkElement) return null;
            
            const href = linkElement.getAttribute("href");
            const title = linkElement.textContent.trim();
            const abstract = abstractElement ? abstractElement.textContent.trim() : "";
            
            return { href, title, abstract };
          } catch (innerError) {
            console.error('解析單個結果時出錯：', innerError);
            return null;
          }
        }).filter(item => item && item.href && item.title);
      } catch (evalError) {
        console.error('評估頁面內容時出錯：', evalError);
        return [];
      }
    });
    
    if (browser) {
      await browser.close();
    }
    
    return Array.isArray(summaries) ? summaries : [];
  } catch (error) {
    console.error("Bing 搜索出錯:", error);
    if (browser) {
      await browser.close();
    }
    return [];
  }
}

async function yahooSearch(query) {
  let browser = null;
  try {
    browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
    
    await page.goto(
      `https://search.yahoo.com/search?p=${encodeURIComponent(query)}&ei=UTF-8`,
      { waitUntil: 'networkidle2', timeout: 15000 }
    );
    
    const summaries = await page.evaluate(() => {
      try {
        let liElements = [];
        const selectors = [
          '.searchCenterMiddle > li', 
          'div[data-testid="web-results"] > div', 
          '#web > ol > li'
        ];
        
        for (const selector of selectors) {
          const elements = document.querySelectorAll(selector);
          if (elements && elements.length > 0) {
            liElements = Array.from(elements);
            break;
          }
        }
        
        if (!liElements || liElements.length === 0) {
          return [];
        }
        
        const firstFiveElements = liElements.slice(0, 5);
        return firstFiveElements.map((li) => {
          try {
            let abstractElement = null;
            for (const selector of ['.compText', 'p', 'div[data-testid="snippet"]']) {
              abstractElement = li.querySelector(selector);
              if (abstractElement) break;
            }
            
            let linkElement = null;
            for (const selector of ['a', 'h3 a', 'div[data-testid="title"] a']) {
              linkElement = li.querySelector(selector);
              if (linkElement) break;
            }
            
            if (!linkElement) return null;
            
            const href = linkElement.getAttribute("href");
            const title = linkElement.getAttribute("aria-label") || linkElement.textContent.trim();
            const abstract = abstractElement ? abstractElement.textContent.trim() : "";
            
            return { href, title, abstract };
          } catch (innerError) {
            console.error('解析單個結果時出錯：', innerError);
            return null;
          }
        }).filter(item => item && item.href && item.title);
      } catch (evalError) {
        console.error('評估頁面內容時出錯：', evalError);
        return [];
      }
    });
    
    if (browser) {
      await browser.close();
    }
    
    return Array.isArray(summaries) ? summaries : [];
  } catch (error) {
    console.error("Yahoo 搜索出錯:", error);
    if (browser) {
      await browser.close();
    }
    return [];
  }
}

async function duckduckgoSearch(query) {
  let browser = null;
  try {
    browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
    
    await page.goto(
      `https://duckduckgo.com/?q=${encodeURIComponent(query)}&ia=web`,
      { waitUntil: 'networkidle2', timeout: 15000 }
    );
    
    await page.waitForSelector('#react-layout', { timeout: 10000 }).catch(() => {});
    
    const summaries = await page.evaluate(() => {
      try {
        let resultElements = [];
        const selectors = [
          '#react-layout ol li', 
          '.serp__results li', 
          'article'
        ];
        
        for (const selector of selectors) {
          const elements = document.querySelectorAll(selector);
          if (elements && elements.length > 0) {
            resultElements = Array.from(elements);
            break;
          }
        }
        
        if (!resultElements || resultElements.length === 0) {
          return [];
        }
        
        const firstFiveElements = resultElements.slice(0, 5);
        return firstFiveElements.map((element) => {
          try {
            let linkElement = null;
            let abstractElement = null;
            
            for (const selector of ['a[data-testid="result-title-a"]', 'h2 a', '.result__a']) {
              linkElement = element.querySelector(selector);
              if (linkElement) break;
            }
            
            for (const selector of ['.result__snippet', '[data-testid="result-snippet"]', 'a[data-testid="result-snippet-link"]']) {
              abstractElement = element.querySelector(selector);
              if (abstractElement) break;
            }
            
            if (!linkElement) return null;
            
            const href = linkElement.getAttribute("href");
            const title = linkElement.textContent.trim();
            const abstract = abstractElement ? abstractElement.textContent.trim() : "";
            
            return { href, title, abstract };
          } catch (innerError) {
            console.error('解析單個結果時出錯：', innerError);
            return null;
          }
        }).filter(item => item && item.href && item.title);
      } catch (evalError) {
        console.error('評估頁面內容時出錯：', evalError);
        return [];
      }
    });
    
    if (browser) {
      await browser.close();
    }
    
    return Array.isArray(summaries) ? summaries : [];
  } catch (error) {
    console.error("DuckDuckGo 搜索出錯:", error);
    if (browser) {
      await browser.close();
    }
    return [];
  }
}

module.exports = {
  googleSearch,
  bingSearch,
  yahooSearch,
  duckduckgoSearch,
};
